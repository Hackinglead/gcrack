# gcrack 2.0
by Tonimir Kisasondi <tonimir.kisasondi@foi.hr>
Faculty of Organization and Informatics
Open Systems and Security Lab
Copyright (c) 2011-2012  Released under GPLv3

Contributors:
Tonimir Kišasondi - (https://github.com/tkisason)
Vlatko Košturjak - Kost (https://github.com/kost)

Thanks to:
Mario Vilas and his python-google lib (https://github.com/MarioVilas/google)

Depends on:
python-nltk, python-google, python-beautifulsoup, python-requests
use pip to install those dependencies.

RELEASE NOTE for 2.0: 
New gcrack and mkwordlist tool with new, cleaner codebase.

gcrack is a set of scripts that helps you crack passwords with google's search. It is composed of the following scripts:

gcrack.py - crack a set of arbitrary hashes with the help of google's search of those hashes
mkwordlist.py - generate a wordlist based on the the input keywords (generates raw or lowercased wordlist that is great for mutation). Also accepts google dorks / google hacks for even more fun :)

usage: all scripts have helpfiles with -h option 

gcrack.py was inspired by BozoCrack that cracks MD5 hashes by googling for hashes and using the resultant query as a wordlist, i wrote this little script to do a similar thing, but with a few improvements:

1) Googles for hash, uses only plaintext data for possible wordlist candidates and hashing
2) Currently supports following hashes: md5, sha1, sha224, sha256, sha384, sha512,ntlm
3) Input file with hashes can be mixed with any type of above supported hashes
4) If the attack finds the hash, it will even ID the hash algorithm for you
5) Uses the first page of google search and first 3 results (the contents of the pages) as the worldlist for cracking, well it's slower then pure google or pure [insert_cracking_service here] but as far as i'm concerned, it will give you more cracked hashes.
6) Generates [file_with_hashes].run file that is a resume/report for all hashes that have been tested or found, if your session breaks, you encounter a captcha or error, simply rerun the script and it will resume cracking. Nice for churning that 3 million hashes dump you found on pastebin ;) 
7) You can use [file_with_hashes].run file as a handy report. 

Hashes that have not been found will have ??????????\t\t[hash] format in the run file so you can grep with no problem.  

Works suprisingly well if you have a large base of hashed passwords and you quickly need a
possible plaintext. The attack is a bit probabalistic because of googles results, so rerunning the script can yield more results. 


You can use the testhashes file to test the script:

$ python gcrack.py testhashes 
[+] Hashes loaded, using google_attack to crack them
md5(qwerty)		d8578edf8458ce06fbc5bb76a58c5ca4
md5(password)		5f4dcc3b5aa765d61d8327deb882cf99
md5(alkali)		f7f41ad5328d528a751c55fa2fcf7273
md5(password09)		8350513a8aff1d5bc1534dbd90747bb8
sha1(123456)		7c4a8d09ca3762af61e59520943dc26494f8941b
sha1(security)		8eec7bc461808e0b8a28783d0bec1a3a22eb0821
md5(admin)		21232f297a57a5a743894a0e4a801fc3
sha1(crypto)		44a9713350e53858f058463d4bf7f1e542d9ca4b
[+] Found  8  of  8

Future improvements/TODO:
0) This is just a sliver of something far far bigger that's going to be released soon...
1) E-mail me ;) 
